#!/usr/bin/env python3

import boto3
import botocore
import json
import os
import sys

DEFAULT_AWS_REGION = "eu-west-2"
OUTPUT_DIR = sys.argv[1]
REQ_PARAMS = [
    "aws_access_key_id",
    "aws_secret_access_key",
    "aws_region",
    "ami_owner_ids",
    "ami_prefix",
]


def set_source_defaults(payload):
    if "aws_region" not in payload["source"].keys():
        payload["source"].update({"aws_region": DEFAULT_AWS_REGION})

    if "ami_owner_ids" not in payload["source"].keys():
        payload["source"].update({"ami_owner_ids": ["self"]})

    return payload


def validate_source(payload):
    for param in REQ_PARAMS:
        if param not in payload["source"].keys():
            sys.stderr.write("\nRequired parameter {} not defined\n".format(param))
            sys.exit(1)

    if type(payload["source"]["ami_owner_ids"]) is not list:
        sys.stderr.write("\nami_owner_ids must be a list\n")
        sys.exit(1)


def write_output_file(ami_id, dir=OUTPUT_DIR, file="ami-id"):
    if not os.path.exists(dir):
        try:
            os.mkdir(dir)
        except OSError as err:
            sys.stderr.write("Error: Failed to create directory: {}".format(err))
            sys.stderr.write("{}".format(err))
            sys.exit(1)

    output_file = dir + "/" + file
    with open(output_file, "w") as f:
        f.write(ami_id)
    f.close()


def get_ami_data(payload):
    try:
        session = boto3.Session(
            aws_access_key_id=payload["source"]["aws_access_key_id"],
            aws_secret_access_key=payload["source"]["aws_secret_access_key"],
            region_name=payload["source"]["aws_region"]
        )
        ec2_client = session.client(
            "ec2",
            payload["source"]["aws_region"]
        )

        response = ec2_client.describe_images(
            Filters=[
                {
                    "Name": "name",
                    "Values": [payload["source"]["ami_prefix"] + payload["version"]["version"]]
                },
            ],
            Owners=payload["source"]["ami_owner_ids"]
        )
    except botocore.exceptions.ClientError as err:
        sys.stderr.write(
            "Failed to connect to AWS:\n{}".format(err)
        )
        sys.exit(1)

    if response["ResponseMetadata"]["HTTPStatusCode"] == 200:
        if len(response["Images"]) == 0:
            ec2_client.close()
            sys.stderr.write(
                "Could not find AMI: {}{}".format(
                    payload["source"]["ami_prefix"], payload["version"]["version"]
                )
            )
            sys.exit(1)
        elif len(response["Images"]) > 1:
            ec2_client.close()
            sys.stderr.write(
                "Multiple AMIs found with name: {}{}".format(
                    payload["source"]["ami_prefix"], payload["version"]["version"]
                )
            )
            sys.exit(1)
        else:
            metadata = []
            for ami in response["Images"]:
                metadata.append({"name": "imageid", "value": ami["ImageId"]})
                metadata.append({"name": "name", "value": ami["Name"]})

            ec2_client.close()
            write_output_file(ami_id=ami["ImageId"])

            output_dict = {}
            output_dict.update({"version": {"version": payload["version"]["version"]}})
            output_dict.update({"metadata": metadata})
            return output_dict

    else:
        ec2_client.close()
        sys.stderr.write("\nReceived {} error from AWS\n".format(
            response["ResponseMetadata"]["HTTPStatusCode"]
        ))
        sys.exit(1)


if __name__ == "__main__":
    payload = json.load(sys.stdin)
    payload = set_source_defaults(payload)
    validate_source(payload)
    sys.stdout.write(json.dumps(get_ami_data(payload), indent=2))
