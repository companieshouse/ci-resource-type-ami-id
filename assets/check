#!/usr/bin/env python3

import boto3
import botocore
import json
import re
import sys
from packaging import version as semver

DEFAULT_AWS_REGION = "eu-west-2"
DEFAULT_VER_REGEX = "(\d{1,3}\.\d{1,3}\.\d{1,3})$"
REQ_PARAMS = [
    "aws_access_key_id",
    "aws_secret_access_key",
    "aws_region",
    "ami_prefix",
    "version_regex"
]


def validate_source(payload):
    if "aws_region" not in payload['source'].keys():
        payload['source'].update({"aws_region": DEFAULT_AWS_REGION})

    if "version_regex" not in payload["source"].keys():
        payload["source"].update({"version_regex": DEFAULT_VER_REGEX})

    for param in REQ_PARAMS:
        if param not in payload['source'].keys():
            sys.stderr.write("\nRequired parameter {} not defined\n".format(param))
            sys.exit(1)

    return payload


def return_versions(payload):
    try:
        session = boto3.Session(
            aws_access_key_id=payload['source']['aws_access_key_id'],
            aws_secret_access_key=payload['source']['aws_secret_access_key'],
            region_name=payload['source']['aws_region']
        )
        ec2_client = session.client(
            "ec2",
            payload['source']['aws_region']
        )

        response = ec2_client.describe_images(
            Filters=[
                {
                    'Name': 'name',
                    'Values': [payload['source']['ami_prefix'] + '*']
                },
            ],
            Owners=['self']
        )
    except botocore.exceptions.ClientError as err:
        sys.stderr.write(
            "Failed to connect to AWS:\n{}".format(err)
        )
        sys.exit(1)

    if response["ResponseMetadata"]["HTTPStatusCode"] == 200:
        if len(response["Images"]) == 0:
            ec2_client.close()
            sys.stderr.write(
                "No AMIs found with prefix: {}".format(
                    payload['source']['ami_prefix']
                )
            )
            sys.exit(1)

        ami_list = []
        ami_regex = re.compile(payload["source"]["version_regex"])
        for ami in response['Images']:
            re_match = re.search(ami_regex, ami["Name"])
            if re_match is not None:
                ami_version = re_match.group(1)
                if "version" in payload.keys():
                    if semver.parse(ami_version) >= semver.parse(payload["version"]["version"]):
                        ami_list.append(ami_version)
                else:
                    ami_list.append(ami_version)

        ami_list.sort()
        if "version" not in payload.keys():
            ami_latest = ami_list.pop()
            ami_list = [ami_latest]

        output_list = []
        for ami_ver in ami_list:
            output_list.append({"version": ami_ver})

        ec2_client.close()
        return output_list

    else:
        ec2_client.close()
        sys.atderr.write("\nReceived {} error from AWS\n".format(
            response["ResponseMetadata"]["HTTPStatusCode"]
        ))
        sys.exit(1)


if __name__ == "__main__":
    payload = validate_source(json.load(sys.stdin))
    sys.stdout.write(json.dumps(return_versions(payload), indent=2))
